{"version":3,"sources":["components/images/AbattoirGhoul.png","components/images/aghoul.jpg","components/Card.js","components/GameArea.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Card","Component","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","className","src","require","React","Boolean","window","location","hostname","match","ReactDOM","render","components_Card","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6JAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8ECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,8JC8CzBC,SC3CQC,8BDCtB,SAAAD,EAAYE,GAAQ,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GAAAG,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KACbH,0EAKN,OACCO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,iBAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACb,cAGHH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACdH,EAAAC,EAAAC,cAAA,OACCC,UAAU,aACVC,IAAMC,EAAQ,OAGhBL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAf,WAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAf,OAIDH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAf,8NAIAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BAAf,eAnCeG,IAAMd,YESLe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOb,EAAAC,EAAAC,cAACY,EAAD,MAAUC,SAASC,eAAe,SD0H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.07803ba8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/AbattoirGhoul.0dce222d.png\";","module.exports = __webpack_public_path__ + \"static/media/aghoul.417e57c7.jpg\";","import React, { Component } from 'react';\nimport '../styles/Card.css';\n\nclass Card extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t//this.show_image = this.show_image.bind(this);\n\t}\n\t\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"card-container\">\n\t\t\t\t<div className=\"name-mana-container\">\n\t\t\t\t\t<div className=\"name\">\n\t\t\t\t\t\tSonic Assault\t\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"cost\">\n\t\t\t\t\t\t{'{1}{U}{R}'}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"image-container\">\n\t\t\t\t\t<img\n\t\t\t\t\t\tclassName=\"card-image\"\n\t\t\t\t\t\tsrc={ require(\"./images/aghoul.jpg\")}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"type-set-container\">\n\t\t\t\t\t<div className=\"type-container\">\n\t\t\t\t\t\tInstant\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"set-logo-container\">\n\t\t\t\t\t\tOO\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"text-container\">\n\t\t\t\t\tTap target creature. Sonic Assault deals 2 damage to that creature's controller.\n\t\t\t\t\tJump-start (You may cast this card from your graveyard by discarding a card in addition to paying its other costs. Then exile this card.)\n\t\t\t\t</div>\n\t\t\t\t<div className=\"power-toughness-container\">\n\t\t\t\t\t3/2\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Card;","import React, { Component } from 'react';\nimport '../styles/GameArea.css';\n\nclass GameArea extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.show_image = this.show_image.bind(this);\n  }\n  \n  show_image() {\n\t\tvar img = document.createElement(\"img\");\n    img.src = \"./Abattoir Ghoul.png\";\n    img.width = 100;\n    img.height = 100;\n    img.alt = \"Abbatoir\";\n\n    return (<div>\n              <img src=\"AbatoirGhoul.png\" heigh=\"100\" width=\"100\"/>\n            </div>);\n\t}\n  \n  render() {\n    return (\n      <div className=\"game-area\">\n        \n        <div className=\"board\">\n        \t<h1>Main Board</h1>\n          <div>\n            <img src= {require(\"./images/AbattoirGhoul.png\")} height=\"300px\" width=\"200px\"/>\n          </div>\n        </div>\n        \n        <div className=\"side-area\">\n          \n          <div className=\"temp\">\n          \t<h4>Life</h4>\n          \t<p>40</p>\n          </div>\n          \n          <div className=\"temp\">\n          \t<h4>Exile</h4>\n          \t<img src=\"./images/AbattoirGhoul.png\" height=\"150\" width=\"150\">\n          \t</img>\n          </div>\n\n          <div className=\"temp\">\n\t\t\t<h4>Grave</h4>\n\t\t\t<body>\n\t\t\t\t<button onclick=\n    \t\t\t\t\"show_image('./AbattoirGhoul.png', \n                 \t276, \n                 \t110, \n                 \t'Abb');\">\"Show Graveyard\"\n             \t</button> \n\t\t\t</body>\n          </div>\n          \n          <div className=\"temp\">\n\t\t\t<h4>Hand</h4>\n          \t<p>0</p>\n          </div>\n          \n          <div className=\"temp\">\n\t\t\t<h4>Library</h4>\n          \t<p>40</p>\n          </div>\n        \n        </div>\n      \n      </div>\n    );\n  }\n\n  \n}\n\nexport default GameArea;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport GameArea from './components/GameArea';\nimport Card from './components/Card';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Card />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}